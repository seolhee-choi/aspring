package site.itwill.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import site.itwill.dto.Board;
import site.itwill.service.BoardService;
import site.itwill.util.Pager;



@Controller
public class BoardController {
	@Autowired
	private BoardService boardService;
	
	/* =========================== */
	@RequestMapping("/board")
	public String boardtest1() {
		return "board/board_first";
	}
	/* =========================== */
	@RequestMapping(value = "/board/list", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> boardList(@RequestParam(defaultValue = "1")int pageNum){
		
		int totalBoard = boardService.getBoardCount();
		int pageSize = 10;
		int blockSize = 5;
		
		Pager pager = new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		Map<String, Object> pagerMap = new HashMap<String, Object>();
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		returnMap.put("boardList", boardService.getBoardList(pagerMap));
		returnMap.put("pager", pager);
		
		return returnMap;
	}
	
	@RequestMapping(value = "/board_add", method = RequestMethod.POST)
	@ResponseBody
	public String boardAdd(@RequestBody Board board) {
		//HtmlUtils.htmlEscape(String str) : 전달받은 문자열에서 태그 관련 문자를 
		//Escape 문자로 변환하여 반환하는 메소드 - XSS 공격에 대한 방어
		board.setContent(HtmlUtils.htmlEscape(board.getContent()));
		boardService.addBoard(board);
		return "success";
	}
	
	
	@RequestMapping(value = "/board_view/{num}", method = RequestMethod.GET)
	@ResponseBody
	public Board boardView(@PathVariable int num) {
		return boardService.getBoard(num);
	}

	@RequestMapping(value = "/board_modify", method = {RequestMethod.PUT, RequestMethod.PATCH})
	@ResponseBody
	public String boardModify(@RequestBody Board board) {
		boardService.modifyBoard(board);
		return "success";
	}
	
	//글번호를 전달받아 REST_BOARD 테이블에 저장된 게시글을 삭제하고 일반 텍스트 결과를 응답하는 요청 처리 메소드
	@RequestMapping(value = "/board_remove/{num}", method = RequestMethod.DELETE)
	@ResponseBody
	public String boardRemove(@PathVariable int num) {
		boardService.removeBoard(num);
		return "success";
	}
	
}
