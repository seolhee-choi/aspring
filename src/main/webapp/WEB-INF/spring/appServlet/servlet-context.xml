<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/assets/**" location="/resources/assets/" />
	<resources mapping="/admin/**" location="/resources/admin/" />
	<resources mapping="/board/**" location="/resources/board/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
	
	<context:component-scan base-package="site.itwill.controller" />
	<context:component-scan base-package="site.itwill.dao"/>
	<context:component-scan base-package="site.itwill.service"/>
	
	<!-- AOP 기능을 이용한 트렌젝션 처리 -->
	<!-- advice : TransactionManager 관련 Spring Bean를 Advisor로 설정하는 엘리먼트 -->
	<!-- => Advisor : JoinPoint가 자동 설정된 횡단관심모듈이 등록된 Advice 클래스의 Spring Bean -->
	<!-- transaction-manager 속성 : TransactionManager 관련 Spring Bean의 beanName를 속성값으로 설정 -->
	<!-- attributes : 트렌젝션 처리 관련 정보를 설정하기 위한 상위 엘리먼트 -->
	<!-- method : 트렌젝션 처리 메소드를 설정하는 엘리먼트 -->
	<!-- name 속성 : 메소드 패턴을 속성값으로 설정 -->
	<!-- rollback-for 속성 : ROLLBACK 명령을 실행하기 위한 예외를 속성값으로 설정 -->
	<!-- read-only 속성 : false 또는 true 중 하나를 속성값으로 설정 -->
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="erase*" rollback-for="Exception"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	TransactionManage에 의해 설정된 Advisor를 사용하여 AOP 기능을 설정
	advisor : advice 엘리먼트로 설정된 Advisor를 사용하기 위한 엘리먼트
	advice-ref 속성 : advice 엘리먼트의 고유값을 속성값으로 설정
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* site.itwill.service..*(..))"/>
	</aop:config>
	-->
	
	
	
	
	
	<!-- 인터셉터 클래스를 Spring bean으로 등록 -->
	<beans:bean class="site.itwill.util.AdminAuthInterceptor" id="adminAuthInterceptor"></beans:bean>
	<beans:bean class="site.itwill.util.LoginAuthInterceptor" id="loginAuthInterceptor"/>
	
	
	<interceptors>
		<interceptor>
			<!-- mapping : 인터셉터 클래스의 메소드가 호출될 URL 패턴을 등록하는 엘리먼트 -->
			<!-- path속성: 인터셉터가 동작될 url패턴을 적는다 -->
			<mapping path="/admin/**"/>
			<exclude-mapping path="/admin/test1"/>
			<!-- ref엘리먼트: 클라이언트 요청에 의해 동작될 인터셉터 클래스의 springbean을 설정하는 엘리먼트 -->
			<!-- bean속성: 여기에 등록된 인터셉터 클래스의 beanName을 적는다. -->
			<beans:ref bean="adminAuthInterceptor"/>
		</interceptor>
		
		<interceptor>
			<!-- * : 모든 요청(현재 폴더), ** : 모든 요청(현재 폴더 및 하위 폴더) -->
			<!-- <mapping path="/userinfo/*"/> -->
			<!-- <mapping path="/userinfo/li*"/> -->
			
			<!-- exclude-mapping : 인터셉터를 사용하지 않는 URL 패턴을 매핑하는 엘리먼트 -->
			<!-- 
			<mapping path="/**"/>
			<exclude-mapping path="/userinfo/login"/>
			-->
			 
			 <!-- 로그인권한 필요한 URL 추가 -->
			<mapping path="/rsv/**"/>
			<mapping path="/review/**"/>
			
			<beans:ref bean="loginAuthInterceptor"/>			
		</interceptor>
		
	</interceptors>
	
	
	

	<!-- 파일 업로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => beanName은 반드시 multipartResolver로 설정 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- maxUploadSize 필드에 업로드 파일의 용량 제한크기(Byte)을 인젝션 처리 -->
		<beans:property name="maxUploadSize" value="20971520"/>
		<!-- defaultEncoding 필드에 전달값에 대한 캐릭터셋의 인코딩을 인젝션 처리 -->
		<beans:property name="defaultEncoding" value="utf-8"/>
	</beans:bean>
</beans:beans>
